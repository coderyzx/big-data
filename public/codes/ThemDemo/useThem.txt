/*动态换肤操作*/
// 引入插件
 [
    'umi-plugin-antd-theme',
    {
      theme: [
        {
          fileName: 'theme1.css',
          key: 'theme1',
          modifyVars: {
            '@primary-color': '#13C2C2',
            '@menu-dark-color': '#324444',
            '@menu-dark-bg': '#5A5A5A',
          },
        },
        {
          fileName: 'theme2.css',
          key: 'theme2',
          modifyVars: {
            '@primary-color': 'red',
            '@menu-dark-color': '#9B9B9B',
            '@menu-dark-bg': '#3A3A3A',
          },
        },
      ],
      // 是否压缩css
      min: true,
      // css module
      isModule: true,
      // 忽略 antd 的依赖
      ignoreAntd: false,
      // 忽略 pro-layout
      ignoreProLayout: false,
      // 不使用缓存
      cache: true,
    },
  ]
export default [
  {
    fileName: 'theme1.css',
    key: 'theme1',
    modifyVars: {
      'primary-color': '#5063C2', // 全局主色
      'layout-header-background': '#5063C2', // 头部背景色
      'link-color': '#5063C2', // 链接色
      'success-color': '#41c87f', // 成功色
      'warning-color': '#ffc350', // 警告色
      'error-color': '#f26255', // 错误色
      'font-size-base': '14px', // 主字号
      'heading-color': '#5C6280', // 标题色
      'text-color': '#3D404D', // 主文本色
      'text-color-secondary ': 'rgba(0, 0, 0, .45)', // 次文本色
      'disabled-color ': 'rgba(0, 0, 0, .25)', // 失效色
      'border-radius-base': '2px', // 组件/浮层圆角
      'border-color-base': ' #D5D7E0', // 边框颜色
      'box-shadow-base': '0 2px 8px rgba(0, 0, 0, 0.15)', // 浮层阴影
      'processing-color': '#5063C2', // 进度条颜色
      'table-selected-row-bg': '#e6eafd', // table选中行背景色
    },
  },
  {
    fileName: 'theme2.css',
    key: 'theme2',
    modifyVars: {
      'primary-color': '#3245a8', // 全局主色
      'layout-header-background': '#3245a8', // 头部背景色
      'link-color': '#3245a8', // 链接色
      'success-color': '#41c87f', // 成功色
      'warning-color': '#ffc350', // 警告色
      'error-color': '#f26255', // 错误色
      'font-size-base': '14px', // 主字号
      'heading-color': '#5C6280', // 标题色
      'text-color': '#3D404D', // 主文本色
      'text-color-secondary ': 'rgba(0, 0, 0, .45)', // 次文本色
      'disabled-color ': 'rgba(0, 0, 0, .25)', // 失效色
      'border-radius-base': '2px', // 组件/浮层圆角
      'border-color-base': ' #D5D7E0', // 边框颜色
      'box-shadow-base': '0 2px 8px rgba(0, 0, 0, 0.15)', // 浮层阴影
      'processing-color': '#3245a8', // 进度条颜色
      'table-selected-row-bg': '#e6eafd', // table选中行背景色
    },
  },
  {
    fileName: 'theme3.css',
    key: 'theme3',
    modifyVars: {
      'primary-color': '#6d7ed4', // 全局主色
      'layout-header-background': '#6d7ed4', // 头部背景色
      'link-color': '#6d7ed4', // 链接色
      'success-color': '#41c87f', // 成功色
      'warning-color': '#ffc350', // 警告色
      'error-color': '#f26255', // 错误色
      'font-size-base': '14px', // 主字号
      'heading-color': '#5C6280', // 标题色
      'text-color': '#3D404D', // 主文本色
      'text-color-secondary ': 'rgba(0, 0, 0, .45)', // 次文本色
      'disabled-color ': 'rgba(0, 0, 0, .25)', // 失效色
      'border-radius-base': '2px', // 组件/浮层圆角
      'border-color-base': ' #D5D7E0', // 边框颜色
      'box-shadow-base': '0 2px 8px rgba(0, 0, 0, 0.15)', // 浮层阴影
      'processing-color': '#6d7ed4', // 进度条颜色
      'table-selected-row-bg': '#e6eafd', // table选中行背景色
    },
  }
]

// 更换颜色
import React from 'react';
import { changeColor } from '@/utils/utils';
import styles from './index.less';

const colorArr = [
  {
    id: 0,
    color: '#3245a8',
  },
  {
    id: 1,
    color: '#5063C2',
  },
  {
    id: 2,
    color: '#6d7ed4',
  },
]

class ThemeDemo extends React.Component {

  state = {
    colorId: 1,
  };

  componentDidMount = () => {
    const theme = localStorage.getItem('theme');
    colorArr.map(item => {
      if (item.color === theme) {
        this.setState({
          colorId: item.id,
        })
        return false;
      }
      return null;
    })
  }

  shouldComponentUpdate () {
    return true;
  }

  handleClick = id => {
    this.setState({
      colorId: id,
    })
    changeColor(colorArr[id].color);
  }

  render () {
    const { colorId } = this.state;
    return (
      <>
        <CodeBoard codeDatas={this.codeDatas}>
          <div className={styles.colorBox}>
            {
              colorArr.map(item => (
                <div
                  className={styles.colorItem}
                  key={item.id}
                  style={{ backgroundColor: item.color }}
                  onClick={() => this.handleClick(item.id)}
                >
                  <span className={[styles.confirmIcon, colorId === item.id ? styles.show : styles.hide, 'iconfont', 'iconu_input_confirm'].join(' ')} />
                </div>
              ))
            }
          </div>
        </CodeBoard>
      </>
    )
  }
}

export default ThemeDemo;


export function changeColor(color) {
  let theme = color;
  if (!theme) theme = localStorage.getItem('theme') || '#5063C2';
  let themeLink = document.getElementById('theme-link');
  if (!themeLink) {
    // 不存在的话，则新建一个
    themeLink = document.createElement('link');
    themeLink.type = 'text/css';
    themeLink.rel = 'stylesheet';
    themeLink.id = 'theme-link';
    document.body.append(themeLink);
  }
  switch (theme) {
    case '#5063C2':
      themeLink.href = '/theme/theme1.css';
      document.body.className = 'body-wrap-theme1';
      break;
    case '#3245a8':
      themeLink.href = '/theme/theme2.css';
      document.body.className = 'body-wrap-theme2';
      break;
    case '#6d7ed4':
      themeLink.href = '/theme/theme3.css';
      document.body.className = 'body-wrap-theme3';
      break;
    default:
      break;
  }
  localStorage.setItem('theme', theme);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>React</title>
</head>
<body>
    <script>
        window.less = {
            async: false,
            env: 'production'//production  development
        };
    </script>
    <div id="root"></div>
    </script>

</body>
</html>