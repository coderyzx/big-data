<<<<<<< HEAD
import React from 'react';
import { Input, Select, TreeSelect } from 'antd';
import classNames from 'classnames';
// import SelectComponent from './SelectComponent';
import SelectCheckbox from './SelectCheckbox';
import InputNumber from './InputNumber';
import { treeData } from './config';
import styles from './index.less';

const { TextArea } = Input;
const { Option } = Select;
const { TreeNode, SHOW_PARENT } = TreeSelect;

/*
  type/输入框类型：
  - default(普通输入框)
  - password(密码框)
  - search(搜索输入框)
  - textArea(多行文本框)
  - select(下拉框)
  - TreeSelect(树选择)

  disabled/是否禁用
  - true
  - false

  resize/input尺寸 - (154px - 220px - 280px - 320px)
  - large=320
  - default=220
  - small=154

  autoSize/textArea尺寸
  - minRows
  - maxRows

  treeCheckable/treeSelect是否开启多选框模式

  maxlength/长度限制
  placeholder/输入框默认文字
  isMulti/是否多选
  style/自定义样式
*/

const getChildren = () => {
  const children = [];
  for (let i = 10; i < 36; i += 1) {
    children.push(<Option
      className={styles.selectOption}
      key={i.toString(36) + i}
    >{i.toString(36) + i}</Option>);
  }
  return children;
}

const getTreeNode = () => (
  <TreeNode className={styles.treeNode} value="parent" title="parent" key="parent">
    {
      treeData.map(parent => (
        <TreeNode
          className={styles.TreeParent}
          value={parent.value}
          title={parent.title}
          key={parent.key}
        >
          {parent.children && parent.children.map(item => (
            <TreeNode
              className={styles.TreeItem}
              value={item.value}
              title={item.title}
              key={item.key}
            >
              {item.children && item.children.map(childItem => (
                <TreeNode
                  className={styles.TreeChild}
                  value={childItem.value}
                  title={childItem.title}
                  key={childItem.key}>
                </TreeNode>
              ))}
            </TreeNode>
          ))}
        </TreeNode>
      ))
    }
  </TreeNode>
)


class InputComponent extends React.Component {
  state = {
    maxLength: 0,
  }

  onChange = () => { };

  textAreaChange = e => {
    const { value } = e.target;
    this.setState({
      maxLength: value.length,
    });
  }

  render() {
    const { type, resize, autoSize, maxLength, style } = this.props;
    const { maxLength: max } = this.state;
    const width = (() => {
      switch (resize) {
        case 'large':
          return 320;
        case 'default':
          return 280;
        case 'small':
          return 220;
        default:
          return '';
      }
    })();

    return (
      <>
        {!type && <Input
          className={styles.input}
          style={{ width }}
          allowClear
          {...this.props}
        />}
        {type === 'password' && <Input.Password
          className={styles.input}
          style={{ width }}
          allowClear
          {...this.props}
        />}
        {type === 'search' && <Input
          className={styles.input}
          style={{ width }}
          allowClear
          {...this.props}
          prefix={<span className={classNames(styles.searchIcon, 'iconfont', 'icon16px_search')} />}
        />}
        {type === 'textArea' && <div className={styles.textArea}>
          <TextArea
            autoSize={autoSize}
            {...this.props}
            onChange={this.textAreaChange}
          />
          <span className={styles.maxLength}>{max}/{maxLength}</span>
        </div>}
        {type === 'select' && <Select
          className={styles.selectDemo}
          dropdownClassName={styles.selectDropDown}
          style={{ width, ...style }}
          showSearch
          {...this.props}
        >
          {getChildren()}
        </Select>}
        {type === 'inputNumber' && <InputNumber {...this.props} />}
        {type === 'treeSelect' && <TreeSelect
          dropdownClassName={styles.TreeSelectDropdown}
          onChange={this.onChange}
          showCheckedStrategy={SHOW_PARENT}
          searchPlaceholder="Please select"
          style={{ width: '200px', marginRight: 20 }}
        >
          {getTreeNode()}
        </TreeSelect>}
        {/* {type === 'treeSelect' && <SelectComponent style={{ width, height: 32 }}/>} */}
        {type === 'selectCheckbox' && <SelectCheckbox />}
      </>
    )
  }
}

export default InputComponent;

import React from 'react';
import { Input, Tooltip } from 'antd';
import classNames from 'classnames';
import styles from './index.less';

function formatNumber(value) {
  value += '';
  const list = value.split('.');
  const prefix = list[0].charAt(0) === '-' ? '-' : '';
  let num = prefix ? list[0].slice(1) : list[0];
  let result = '';
  while (num.length > 3) {
    result = `,${num.slice(-3)}${result}`;
    num = num.slice(0, num.length - 3);
  }
  if (num) {
    result = num + result;
  }
  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;
}

class InputNumber extends React.Component {
  state = {
    value: 0,
  };

  onChange = e => {
    const { value } = e.target;
    const reg = /^[1-9]\d*$/;
    if ((!Number.isNaN(value) && reg.test(value)) || value === '0' || value === '') {
      this.setState({ value });
    }
  };

  onBlur = () => {
    const { value } = this.state;
    if (!value) return;
    let valueTemp = value;
    if (value.charAt(value.length - 1) === '.' || value === '-') {
      valueTemp = value.slice(0, -1);
    }
    this.setState({ value: valueTemp });
  };

  plus = () => {
    let { value: valueTemp } = this.state;
    valueTemp = +valueTemp + 1;
    this.setState({
      value: valueTemp,
    })
  }

  subtract = () => {
    let { value: valueTemp } = this.state;
    valueTemp = +valueTemp;
    if (valueTemp === 0) return;
    valueTemp -= 1;
    this.setState({
      value: valueTemp,
    })
  }

  render() {
    const { value } = this.state;
    const title = value || value !== '0' ? (
      <span className="numeric-input-title">{value !== '-' ? formatNumber(value) : '-'}</span>
    ) : (
      'Input a number'
    );
    return (
      <div className={styles.inputNumber}>
        <span className={classNames(styles.iconBtn, 'iconfont', 'iconsubtract')} onClick={this.subtract}></span>
        <Tooltip
          trigger={['focus']}
          title={title}
          placement="topLeft"
          overlayClassName="numeric-input"
        >
          <Input
            className={styles.input}
            value={value}
            onChange={this.onChange}
            onBlur={this.onBlur}
            maxLength={13}
          />
        </Tooltip>
        <span className={classNames(styles.iconBtn, 'iconfont', 'iconplus')} onClick={this.plus} />
      </div>
    )
  }
}

export default InputNumber;

.inputNumber {
  display: flex;
  .input {
    width: 112px;
    height: 36px;
    margin: 0 10px;
    text-align: center;
  }
}

.iconBtn {
  display: inline-block;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border: 1px solid #D5D7E0;
  box-sizing: border-box;
  background: #FFFFFF;
  color: #3F51B5;
  font-size: 18px;
  text-align: center;
  line-height: 36px;
  cursor: pointer;
  &:hover {
    background: #EDEFF9;
    border: 1px solid rgba(143,153,204,0.50);
  }
  &:active {
    background: #3F51B5;
    border: 1px solid #CED0D9;
    color: #fff;
  }
}

import React from 'react';
import { Tooltip } from 'antd';
import classNames from 'classnames';
import { selectCheckArray } from '../config';
import styles from './index.less';

/*
  单选 / 多选  isMulti
*/

class SelectCheckbox extends React.Component {
  constructor(props) {
    super(props);
    selectCheckArray.map(item => ({ ...item, isCheck: false }))
    this.state = {
      focus: false,
      checkedArray: [],
      selectArray: selectCheckArray,
    };
    this.ref = React.createRef();
  }

  componentDidMount() {
    document.body.addEventListener('click', this.blurInput, false);
  }

  componentWillUnmount() {
    document.body.removeEventListener('click', this.blurInput);
  }

  treeNode = selectArray => (
    selectArray.map(item => (
      <li
        className={classNames(styles.selectTreeNode)}
        onClick={e => this.handleClick(e, item)}
        key={item.id}
      >
        <span className={classNames(
          styles.selectTreeCheckbox,
          item.isCheck && styles.selectTreeIsChecked,
        )}>
          <span className={classNames(styles.selectTreeCheckboxInner, 'iconfont', 'icon12px_confirm')} />
        </span>
        <span className={styles.selectTreeText}>{item.name}</span>
      </li>
    ))
  )

  handleClick = (e, item) => {
    e.preventDefault()
    e.stopPropagation();
    const { selectArray } = this.state;
    // 1、ALL被勾选，所有item全选，输入框只显示ALL
    // 2、ALL取消勾选，所有item取消选中，输入框清空
    // 3、除了ALL以外所有item被勾选，那么ALL被自动勾选，输入框只显示ALL
    const arr = selectArray.map(option => {
      if (item.name === 'ALL') {
        return { ...option, isCheck: !item.isCheck };
      }
      if (option.id === item.id) {
        return { ...option, isCheck: !option.isCheck };
      }
      return option;
    });
    const checkedArray = arr.filter(some => some.isCheck && some.name !== 'ALL');
    arr[0].isCheck = checkedArray.length === selectArray.length - 1;
    this.setState({
      checkedArray,
      selectArray: arr,
    });
  }

  focusInput = e => {
    e.stopPropagation();
    this.setState(preState => (
      { focus: !preState.focus }
    ))
  }

  blurInput = e => {
    if (this.state.focus && !e.target.className.includes('selectTree')) {
      this.setState({
        focus: false,
      })
    }
  }

  clearChecked = e => {
    e.stopPropagation();
    const { selectArray } = this.state;
    const arr = selectArray.map(item => ({ ...item, isCheck: false }));
    this.setState({
      selectArray: arr,
      checkedArray: [],
    })
  }

  tooltipTitle = () => {
    let title = '';
    const { selectArray, checkedArray } = this.state;
    if (checkedArray.length === selectArray.length - 1) return 'ALL';
    checkedArray.map(item => {
      title += `${item.name}，`
      return null;
    });
    return title;
  }

  render() {
    const { focus, selectArray, checkedArray } = this.state;
    return (
      <div className="selectTreeWrap" style={{ position: 'relative' }} ref={this.ref}>
        <div
          className={classNames(styles.selectTreeSelection, focus && styles.selectTreeFocus)}
          {...this.props}
          onClick={e => this.focusInput(e)}
        >
          <Tooltip
            trigger={['hover']}
            title={this.tooltipTitle()}
            placement="topLeft"
          >
            <div className={styles.selectTreeSelectedText}>
              {checkedArray.length === selectArray.length - 1 ?
                <span className="selectTreeSpan">ALL</span> : checkedArray.map(item => (
                  <span key={item.id} className="selectTreeItemName">{item.name}，</span>
              ))}
            </div>
          </Tooltip>
          {checkedArray.length === 0 ?
            <span className={classNames(styles.selectTreeSelectionArrow, focus ? styles.active : styles.none, 'iconfont', 'icon12px_dropdown5')} /> :
            <span
              className={classNames(styles.selectTreeSelectionClear, 'iconfont', 'icon12px_delete_item')}
              onClick={e => this.clearChecked(e)}
            />}
        </div>
        <div className={classNames(styles.selectTreeDropdown, focus ? styles.show : styles.hide)}>
          <ul className={styles.selectTree}>{this.treeNode(selectArray)}</ul>
        </div>
      </div>
    )
  }
}

export default SelectCheckbox;

.selectTreeSelection {
  height: 32px;
  width: 186px;
  box-sizing: border-box;
  border: 1px solid #d5d7e0;
  box-shadow: 0 0 0 0 0;
  -webkit-box-shadow: 0 0 0 0 0;
  border-radius: 2px;
  outline: 0;
  transition: all .3s cubic-bezier(0.645,0.045,0.355,1);
  position: relative;
  padding: 4px 10px;
  cursor: pointer;
  &:hover {
    border-color: #7687cf;
    .selectTreeSelectionClear {
      color: rgba(0, 0, 0, .5);
    }
  }
  &.selectTreeFocus, &:focus, &:active {
    border-color: #7687cf;
    box-shadow: 0 0 0 2px rgba(80, 99, 194, 0.2);
  }
}

.selectTreeSelectedText {
  width: 94%;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.selectTreeInput {
  min-width: 4px;
  max-width: 100%;
  height: 100%;
  line-height: 1;
  border: 0;
}

.selectTreeSelectionClear, .selectTreeSelectionArrow {
  font-size: 12px;
  position: absolute;
  right: 12px;
  top: 50%;
  z-index: 1;
}

.selectTreeSelectionClear {
  margin-top: -6px;
  line-height: 1;
  transition: color .3s ease, opacity .15s ease;
  -webkit-transition: color .3s ease, opacity .15s ease;
  color: rgba(256, 256, 256, 0);
}

.selectTreeSelectionArrow {
  color: rgba(0, 0, 0, .5);
  margin-top: -8px;
  transform: rotate(0deg);
  transform-origin: 50% 46%;
  transition: transform .5s ease;
}

.selectTreeSelectionArrow.active {
  transform: rotate(180deg);
}

.selectTreeSelectionArrow.none {
  transform: rotate(0deg);
}

// 下拉树盒子
.selectTreeDropdown {
  box-shadow: 0 2px 8px rgba(0, 0, 0, .15);
  position: absolute;
  top: 36px;
  z-index: 1050;
  width: 100%;
  background-color: #fff;
  border-radius: 4px;
  outline: none;
  box-sizing: border-box;
  max-height: 0;
  overflow: auto;
  transition: max-height .15s ease;
  &.hide {
    max-height: 0;
  }
  &.show {
    max-height: 210px;
  }
  ul {
    margin-bottom: 0;
  }
}

.selectTree {
  padding: 5px 0;
  width: 100%;
}

.selectTreeNode {
  width: 100%;
  height: 40px;
  line-height: 40px;
  padding-left: 10px;
  cursor: pointer;
  &:hover {
    background-color: #f0f5ff;
  }
  & span {
    vertical-align: middle;
  }
}

.selectTreeText {
  font-family: MicrosoftYaHei;
  font-size: 14px;
  color: #5C6280;
}

.selectTreeCheckbox {
  display: inline-block;
  box-sizing: border-box;
  width: 16px;
  height: 16px;
  background: #FFFFFF;
  border: 1px solid #D0D4D9;
  border-radius: 2px;
  position: relative;
  margin-right: 10px;
}

.selectTreeCheckboxInner {
  font-size: 8px;
  line-height: 16px;
  width: 100%;
  height: 100%;
  position: absolute;
  text-align: center;
  color: #fff;
}

.selectTreeIsChecked {
  background-color: var(--theme-color);
  border-color: var(--theme-color);
}

export const treeData = [
  {
    value: 'parent 1',
    title: 'parent 1',
    key: '0-1',
    children: [
      {
        value: 'item1-1',
        title: 'myItem1-1',
        key: 'random1-1',
        children: [
          {
            value: 'child1-1-1',
            title: 'myChild1-1-1',
            key: 'random1-1-1',
          },
          {
            value: 'child1-1-2',
            title: 'myChild1-1-2',
            key: 'random1-1-2',
          },
          {
            value: 'child1-1-3',
            title: 'myChild1-1-3',
            key: 'random1-1-3',
          },
          {
            value: 'child1-1-4',
            title: 'myChild1-1-4',
            key: 'random1-1-4',
          },
        ],
      },
      {
        value: 'item1-2',
        title: 'myItem1-2',
        key: 'random1-2',
      },
    ],
  },
  {
    value: 'parent 2',
    title: 'parent 2',
    key: '0-2',
    children: [
      {
        value: 'item2-1',
        title: 'myItem2-1',
        key: 'random2-1',
      },
    ],
  },
]
/* config */
export const selectArray = [
  {
    name: 'ALL',
    id: '1',
    isOpen: false,
    children: [
      {
        name: '组A',
        id: '1-1',
        isOpen: false,
        children: [
          {
            name: '组A-a',
            id: '1-1-1',
            isOpen: false,
          },
        ],
      },
      {
        name: '组B',
        id: '1-2',
        isOpen: false,
        children: [
          {
            name: '组B-b',
            id: '1-2-1',
            isOpen: false,
          },
        ],
      },
    ],
  },
];

export const selectCheckArray = [
  {
    name: 'ALL',
    id: '1',
  },
  {
    name: '用户手册',
    id: '2',
  },
  {
    name: '服务手册',
    id: '3',
  },
  {
    name: '操作手册',
    id: '4',
  },
  {
    name: '系统手册',
    id: '5',
  },
  {
    name: '系统手册',
    id: '6',
  },
  {
    name: '系统手册',
    id: '7',
  },
  {
    name: '系统手册',
    id: '8',
  },
];
=======